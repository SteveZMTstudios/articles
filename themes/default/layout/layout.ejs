<!DOCTYPE html>
<html lang="<%= page.lang %>">
<%- partial('_partial/head') %>
<body class="mdui-appbar-with-toolbar mdui-theme-primary-<%= theme.theme_color.primary || 'indigo' %> mdui-theme-accent-<%= theme.theme_color.accent || 'pink' %>">
  <% if (theme.comment && theme.comment.use === 'gitalk' && theme.comment.gitalk_js) { %>
  <script>window.GITALK_SRC = '<%- theme.comment.gitalk_js %>';</script>
  <% } %>
  <% if (theme.busuanzi.site || theme.busuanzi.page) { %>
  <script>window.BUSUANZI_SRC = '<%- theme.busuanzi.busuanzi_js %>';</script>
  <% } %>
  <script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.6.0.min.js"></script>
  <script>
/* //console.log -> console.log */

    // 统一规范化 Gitalk id：仅保留 pathname，去掉域名、查询、hash、尾部 index.html 与多余斜杠
    function __normalizeGitalkId(raw) {
      try {
        if (!raw) raw = location.pathname;
        if (/^https?:\/\//i.test(raw)) {
          var u = new URL(raw, window.location.origin);
          raw = u.pathname || '/';
        }
        try { raw = decodeURI(raw); } catch (e) {}
        raw = raw.replace(/index\.html$/i, '');
        if (raw && raw.charAt(0) !== '/') raw = '/' + raw;
        if (raw.length > 1 && raw.endsWith('/')) raw = raw.slice(0, -1);
        return raw || '/';
      } catch (e) {
        return (window.location && window.location.pathname) || '/';
      }
    }

  // 触发常用事件，兼容 PJAX/AJAX 页面切换
    function triggerEvents() {
      document.dispatchEvent(new Event('DOMContentLoaded'));
      document.dispatchEvent(new Event('readystatechange'));
      window.dispatchEvent(new Event('load'));
      window.dispatchEvent(new Event('scroll'));
      window.dispatchEvent(new Event('resize'));
      window.dispatchEvent(new Event('orientationchange'));
      window.dispatchEvent(new Event('focus'));
      document.hasFocus() && document.activeElement && document.activeElement.focus();
  }

    // 重新初始化 random-notice 和 Gitalk
    function reinitPageComponents() {
      // 重新初始化 random-notice
      if (typeof window.initNoticeSystem === 'function') {
        try {
          window.initNoticeSystem();
        } catch (e) {
          console.warn('NoticeSystem reinit error:', e);
        }
      }
      // 重新初始化 Gitalk
      if (window.GITALK_SRC && document.getElementById('gitalk-container')) {
        if (typeof Gitalk === 'undefined') {
          var script = document.createElement('script');
          script.src = window.GITALK_SRC;
          script.onload = function() {
            setTimeout(initGitalk, 100);
          };
          document.body.appendChild(script);
        } else {
          setTimeout(initGitalk, 100);
        }
      }
    }

    // 修正 Gitalk 初始化，防止 repo/owner 取 undefined
    function initGitalk() {
      if (!window.Gitalk) return;
      var el = document.getElementById('gitalk-container');
      if (!el) return;
      // 取 theme.comment 配置
      var config = window.GITALK_CONFIG || {};
      if (!config.repo || !config.owner) {
        if (window.theme && window.theme.comment) {
          config = Object.assign({}, window.theme.comment);
        }
      }
      // 统一并兜底 id，避免使用完整 href 导致每次访问生成新 Issue
      try {
        config.id = __normalizeGitalkId(config.id || (window.location && window.location.pathname));
      } catch (e) {}
      if (!config.repo || !config.owner) {
        el.innerHTML = '<div style="color:red">Gitalk 配置错误: repo/owner 未设置</div>';
        return;
      }
      // 防止重复渲染
      el.innerHTML = '';
      var gitalk = new Gitalk(config);
      gitalk.render('gitalk-container');
      // 更新全局配置，保证一致性
      window.GITALK_CONFIG = config;
    }

    // 监听页面切换（如 PJAX/AJAX），重新初始化页面组件
    document.addEventListener('page:updated', function() {
      setTimeout(function() {
        triggerEvents();
        reinitPageComponents();
      }, 50);
    });

    // 首次页面加载
    window.addEventListener('load', function() {
      setTimeout(function() {
        reinitPageComponents();
      }, 50);
  // 记录当前 URL，供 popstate 判定使用
  try { window._pjax_last_url = location.href; } catch(e) {}
    });
    

    function handleDrawer() {
      try {
        const drawer = document.querySelector('.mdui-drawer');
        if (drawer) {
          const $ = mdui.$;
          const inst = new mdui.Drawer(drawer);
          const isMobile = window.innerWidth < 1024;
          const menuButtonnw = document.querySelector('.mdui-btn-icon');
          if (menuButtonnw && inst.getState() === 'opened' && isMobile) {
            menuButtonnw.click();
          }
          const isForceClose = localStorage.getItem('mdui-drawer-close');
          /**
          if (isMobile || isForceClose) {
            inst.close();
            $('.mdui-overlay.mdui-overlay-show').remove();
            $('body').css('overflow', 'auto');
            
          }
            */
        }
      } catch (err) {
        console.warn('处理抽屉导航失败:', err);
        alert('处理抽屉导航失败，请刷新页面');
      }
    }

    function reinitializeNoticeSystem() {
      if (localStorage.getItem('notice-system-initialized') === 'true') {
        const noticeElement = document.getElementById('random-notice');
        if (noticeElement && (window.location.pathname === '/' || window.location.pathname === '/index.html')) {
          //console.log('Reinitializing notice system');
          window.initNoticeSystem();
        }
      }
      if (window.location.pathname === '/' || window.location.pathname === '/index.html') {
        if (typeof window.initNoticeSystem === 'function') {
          window.initNoticeSystem();
        }
      }
    }

    // 修复 mdui-dialog 在 PJAX 环境中的问题
    function fixMduiDialogs() {
      // 处理所有带 mdui-dialog 属性的元素
      document.querySelectorAll('[mdui-dialog]').forEach(function(el) {
        var dialogTarget = el.getAttribute('mdui-dialog');
        // 解析属性值，获取目标对话框ID
        var dialogId = '';
        try {
          // 可能是 {target: '#xxx'} 格式
          var match = /target\s*:\s*['"]#?([^'"]+)['"]/i.exec(dialogTarget);
          if (match && match[1]) {
            dialogId = match[1];
          } 
          // 也可能直接是 #xxx 格式
          else if (dialogTarget.startsWith('#')) {
            dialogId = dialogTarget.substring(1);
          }
        } catch(e) {}
        
        if (!dialogId) return;
        
        // 移除原有的点击事件监听器并重新绑定
        el.removeEventListener('click', handleDialogClick);
        el.addEventListener('click', handleDialogClick);
        
        function handleDialogClick(e) {
          e.preventDefault();
          e.stopPropagation();
          var dialog = document.getElementById(dialogId);
          if (dialog && window.mdui && mdui.Dialog) {
            var inst = new mdui.Dialog(dialog, {
              history: false  // 不修改浏览器历史记录
            });
            inst.open();
          }
          return false;
        }
      });
    }

    function simulatePageRefresh() {
      window.scrollTo(0, 0);
      triggerEvents();
      handleDrawer();
      window.dispatchEvent(new Event('page:updated'));
      if (typeof window.initNoticeSystem === 'function') {
        window.initNoticeSystem();
      }
      reinitializeNoticeSystem();
      // 修复对话框
      setTimeout(fixMduiDialogs, 100);
      //console.log('Page type:', window.location.pathname);
      //console.log('Notice system status:', window.noticeSystemInitialized);
    }

    // Material Design 2 刷新指示器
    function showLoading() {
      if (window.showMaterialRefresh) window.showMaterialRefresh();
      let progressBar = document.querySelector('.loading-progress');
      if (!progressBar) {
        progressBar = document.createElement('div');
        progressBar.className = 'mdui-progress loading-progress';
        const inner = document.createElement('div');
        inner.className = 'mdui-progress-indeterminate';
        progressBar.appendChild(inner);
        document.body.insertBefore(progressBar, document.body.firstChild);
      }
      progressBar.style.display = 'block';
    }

    function hideLoading() {
      if (window.hideMaterialRefresh) window.hideMaterialRefresh();
      const progressBar = document.querySelector('.loading-progress');
      if (progressBar) {
        progressBar.style.display = 'none';
      }
    }

    function handleAjaxError(errorType, link, href) {
  console.error(`页面加载失败: ${errorType}`, { href: href, link: link });
      mdui.snackbar({
        message: `页面加载失败，(${errorType})`,
        timeout: 1500,
        onClose: function() {
          // window.location.href = href;
          window.location.reload();
        }
      });
    }

    function handleAjaxSuccess(response, href, targetHash) {
      try {
        //console.log('handleAjaxSuccess start', { href: href, targetHash: targetHash });
        const $response = $(response);
        const $newContent = $response.find('#main');
        const $mainContent = $newContent.length ? $newContent : $response.filter('#main');
        // Github Pages主页特殊处理：找不到内容时直接整页刷新
        if (!$mainContent.length) {
          console.warn('handleAjaxSuccess: 未找到 #main 内容', { href: href, responseSample: response.slice? response.slice(0,200): undefined });
          if (href.endsWith('/') || href.endsWith('/index.html')) {
            window.location.reload();
            return;
          }
          console.error('无法找到内容区域，响应内容:', response);
          throw new Error('无法找到目标内容');
        }
        // 1. 移除 #main 内的 gitalk 脚本，防止重复插入
        $('#main script[src*="gitalk"]').remove();
        // 2. 插入新内容
        $('#main').html($mainContent.html());
        // 3. 只重载带 data-pjax 的脚本（兼容所有属性和内容，推荐写法）
        document.querySelectorAll('#main script[data-pjax]').forEach(item => {
          const newScript = document.createElement('script');
          Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value));
          const content = item.text || item.textContent || item.innerHTML || '';
          if (content) newScript.appendChild(document.createTextNode(content));
          item.parentNode.replaceChild(newScript, item);
        });
        // 3.1 重新提取并赋值 window.GITALK_CONFIG（兼容 Github Pages）
        var newGitalkConfigScript = $mainContent.find('script').filter(function() {
          return this.textContent && this.textContent.includes('window.GITALK_CONFIG');
        });
        if (newGitalkConfigScript.length) {
          try { eval(newGitalkConfigScript.text()); } catch(e) {console.warn('GITALK_CONFIG eval error', e);}        
        }
  // 3.1.1 使用目标链接归一化 id，防止因 eval 时机导致取到了旧 pathname
        try {
          if (window.GITALK_CONFIG) {
            var __targetPath = new URL(href, window.location.origin).pathname;
            window.GITALK_CONFIG.id = __normalizeGitalkId(window.GITALK_CONFIG.id || __targetPath);
          }
        } catch(e) { console.warn('Normalize Gitalk id failed', e); }
        // 3.2 重新执行 Google Tag/统计等外部脚本（如有）
        $mainContent.find('script[src]').each(function() {
          var src = this.getAttribute('src');
          // 只插入未加载过的外部脚本，兼容 Google Tag/统计
          if (src && !document.querySelector('script[src="'+src+'"]')) {
            var extScript = document.createElement('script');
            extScript.src = src;
            if (this.defer) extScript.defer = true;
            if (this.async) extScript.async = true;
            document.body.appendChild(extScript);
          }
        });
        // 4. 只在用户点击时 pushState，popstate 不再 pushState
        if (!window._popstate_handling) {
          history.pushState({}, '', href);
          try { window._pjax_last_url = href; } catch(e) {}
        }
        document.title = $response.filter('title').text() || document.title;
        simulatePageRefresh();
        // busuanzi 重新加载（强制重新插入脚本）
        var busuanziScriptSelector = 'script[src*="busuanzi"]';
        var oldBusuanzi = document.querySelector(busuanziScriptSelector);
        if (oldBusuanzi) {
          oldBusuanzi.parentNode.removeChild(oldBusuanzi);
        }
        if (window.BUSUANZI_SRC) {
          var script = document.createElement('script');
          script.src = window.BUSUANZI_SRC;
          script.defer = true;
          document.body.appendChild(script);
        }
  // gitalk 重新加载由 reinitPageComponents -> initGitalk 统一处理，避免双重渲染
  if (targetHash) {
          const target = $(targetHash);
          if (target.length) {
            $('html, body').animate({
              scrollTop: target.offset().top - 60
            }, 300);
          }
        }
        hideLoading();
      } catch (err) {
        window.location.reload(); // Github Pages Problem
        handleAjaxError('switch_error', null, href);

      }
    }

    function handleLinkClick(e, link, href, hashIndex, currentPath, targetPath) {
      //console.log('handleLinkClick', { href: href, hashIndex: hashIndex, currentPath: currentPath, targetPath: targetPath, linkClasses: link.attr('class') });
      // 如果是纯 hash 链接（如 "#foo"）或目标路径与当前路径相同（忽略末尾斜杠），
      // 则使用浏览器默认行为，避免触发 PJAX/AJAX 重载导致回到页首。
      try {
        var normalizePathname = function(p) {
          if (!p) return '/';
          p = String(p);
          if (p.length > 1 && p.endsWith('/')) return p.slice(0, -1);
          return p;
        };
        if (hashIndex === 0) {
          // 纯锚点：停止后续同一事件的其他监听器，使用浏览器原生行为进行跳转/滚动
          //console.log('handleLinkClick: pure hash - allow native', { href: href });
          if (e && typeof e.stopImmediatePropagation === 'function') e.stopImmediatePropagation();
          return true;
        }
        if (normalizePathname(currentPath) === normalizePathname(targetPath)) {
          // 指向同一页面（忽略末尾斜杠）：停止后续监听器，保留原生定位
          //console.log('handleLinkClick: same normalized path - allow native', { currentPath: currentPath, targetPath: targetPath });
          if (e && typeof e.stopImmediatePropagation === 'function') e.stopImmediatePropagation();
          return true;
        }
      } catch (err) {
        // 出错时回退到原有逻辑
      }
      if (link.find('.mdui-icon.material-icons').text() === 'search' || !href || typeof href !== 'string' || href.startsWith('javascript:')) {
        //console.log('handleLinkClick: ignored (search/invalid)', { href: href });
        return true;
      }
      if (link.prop('host') === window.location.host && !link.attr('target') && link.attr('target') !== '_blank' && !e.ctrlKey && !e.shiftKey && !e.metaKey) {
        //console.log('handleLinkClick: intercepting for PJAX', { href: href });
        e.preventDefault();
        showLoading();
        const targetUrl = hashIndex > -1 ? href.substring(0, hashIndex) : href;
        const targetHash = hashIndex > -1 ? href.substring(hashIndex) : '';
        //console.log('handleLinkClick: ajax target', { targetUrl: targetUrl, targetHash: targetHash });
        $.ajax({
          url: targetUrl,
          method: 'GET',
          dataType: 'html',
          success: function(response) {
            //console.log('AJAX success callback for', href);
            handleAjaxSuccess(response, href, targetHash);
          },
          error: function(xhr, status, error) {
            console.error('AJAX error', { status: status, error: error, href: href });
            handleAjaxError('ajax_error', link, href);
          }
        });
      }
    }

    $(document).on('click', 'a', function(e) {
      const link = $(this);
      const href = link.attr('href');
  //console.log("document click a:", { href: href, classes: link.attr('class'), text: link.text() });
      // 修复 mdui-dialog hash 跳转导致弹窗错位
      if (href && href.startsWith('#mdui-dialog')) {
        e.preventDefault();
        var dialogId = href.replace('#', '');
        var dialog = document.getElementById(dialogId);
        if (dialog && window.mdui && mdui.Dialog) {
          var inst = new mdui.Dialog(dialog);
          inst.open();
        }
        return false;
      }
      const hashIndex = href ? href.indexOf('#') : -1;
      const currentPath = window.location.pathname;
      const targetPath = new URL(href, window.location.origin).pathname;
      handleLinkClick(e, link, href, hashIndex, currentPath, targetPath);
    });

    window.onpopstate = function(event) {
      //console.log('onpopstate triggered, location:', location.href, 'last_pjax:', window._pjax_last_url);
      try {
        var last = window._pjax_last_url || document.location.href;
        var newPath = new URL(location.href, window.location.origin).pathname;
        var lastPath = new URL(last, window.location.origin).pathname;
        var newHash = new URL(location.href, window.location.origin).hash;
        if (newPath === lastPath) {
          //console.log('onpopstate: same pathname, only hash changed — skip AJAX', { newHash: newHash });
          // 手动滚动到目标（某些情况下浏览器可能已滚动）
          if (newHash) {
            var resolveHashTarget = function(hash) {
              try {
                if (!hash) return null;
                var raw = hash.charAt(0) === '#' ? hash.slice(1) : hash;
                // 1) 尝试 decodeURIComponent -> getElementById
                try {
                  var decoded = decodeURIComponent(raw);
                } catch (e) {
                  decoded = raw;
                }
                if (decoded) {
                  var byId = document.getElementById(decoded);
                  if (byId) return byId;
                }
                // 2) 没有找到，用 CSS.escape 包裹整 querySelector
                if (window.CSS && typeof window.CSS.escape === 'function') {
                  try {
                    var sel = '#' + CSS.escape(raw);
                    var q = document.querySelector(sel);
                    if (q) return q;
                  } catch (e) {
                    // ignore
                  }
                }
                // 3) 直接干
                try {
                  return document.querySelector(hash);
                } catch (e) {
                  return null;
                }
              } catch (e) {
                return null;
              }
            };
            var target = resolveHashTarget(newHash);
            if (target) {
              setTimeout(function(){ target.scrollIntoView(); }, 10);
            }
          }
          return;
        }
      } catch (e) { console.warn('onpopstate check failed', e); }

      //console.log('onpopstate: performing PJAX fetch for', location.href);
      showLoading();
      window._popstate_handling = true;
      var href = location.href;
      $.ajax({
        url: href,
        method: 'GET',
        dataType: 'html',
        success: function(response) {
          handleAjaxSuccess(response, href, null);
          window._popstate_handling = false;
          try { window._pjax_last_url = href; } catch(e) {}
        },
        error: function(xhr, status, error) {
          handleAjaxError('br_ajax_error', $(location), href);
          window._popstate_handling = false;
        }
      });
    };
  </script>
  <script>if(window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches){document.getElementsByTagName("body")[0].className+=" mdui-theme-layout-dark"};</script>
  <script>var a=localStorage.getItem("mdui-drawer-close");if(!a){document.getElementsByTagName("body")[0].className+=" mdui-drawer-body-left"};</script>
  <%- partial('_partial/header', null, {cache: !config.relative_link}) %>
  <%- partial('_partial/sidebar', null, {cache: !config.relative_link}) %>
  <main id="main" class="mdui-m-t-5 fadeIn animated"><%- body %></main>
  <%- partial('_partial/footer', null, {cache: !config.relative_link}) %>
  <button id="gotop" class="mdui-fab mdui-fab-fixed mdui-fab-hide mdui-color-theme-accent mdui-ripple"><i class="mdui-icon material-icons" translate="no">arrow_upward</i></button>
  <% if (theme.busuanzi.site || theme.busuanzi.page) { %><script data-pjax defer src="<%- theme.busuanzi.busuanzi_js %>"></script><% } %>
  <%- js(['js/mdui', 'js/script']) %>
  <%- js('custom') %>
</body>
</html>