<!DOCTYPE html>
<html lang="<%= page.lang %>">
<%- partial('_partial/head') %>
<body class="mdui-appbar-with-toolbar mdui-theme-primary-<%= theme.theme_color.primary || 'indigo' %> mdui-theme-accent-<%= theme.theme_color.accent || 'pink' %>">
  <% if (theme.comment && theme.comment.use === 'gitalk' && theme.comment.gitalk_js) { %>
  <script>window.GITALK_SRC = '<%- theme.comment.gitalk_js %>';</script>
  <% } %>
  <% if (theme.busuanzi.site || theme.busuanzi.page) { %>
  <script>window.BUSUANZI_SRC = '<%- theme.busuanzi.busuanzi_js %>';</script>
  <% } %>
  <script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.6.0.min.js"></script>
  <script>
    // 页面组件初始化管理器
    window.PageManager = {
      // 存储需要重新初始化的组件
      components: [],
      
      // 注册组件
      register: function(name, initFn, cleanupFn) {
        this.components.push({ name, initFn, cleanupFn });
      },
      
      // 清理所有组件
      cleanup: function() {
        this.components.forEach(component => {
          if (component.cleanupFn) {
            try {
              component.cleanupFn();
            } catch (e) {
              console.warn(`Component ${component.name} cleanup error:`, e);
            }
          }
        });
      },
      
      // 重新初始化所有组件
      reinit: function() {
        this.components.forEach(component => {
          try {
            component.initFn();
          } catch (e) {
            console.warn(`Component ${component.name} init error:`, e);
          }
        });
      }
    };

    // 触发 DOM 事件
    function triggerEvents() {
      const events = ['DOMContentLoaded', 'readystatechange'];
      events.forEach(eventType => {
        document.dispatchEvent(new Event(eventType));
      });
      
      const windowEvents = ['load', 'scroll', 'resize'];
      windowEvents.forEach(eventType => {
        window.dispatchEvent(new Event(eventType));
      });
    }

    // Gitalk 初始化
    function initGitalk() {
      if (!window.Gitalk) return;
      var el = document.getElementById('gitalk-container');
      if (!el) return;
      
      var config = window.GITALK_CONFIG || {};
      if (!config.repo || !config.owner) {
        el.innerHTML = '<div style="color:red">Gitalk 配置错误: repo/owner 未设置</div>';
        return;
      }
      
      el.innerHTML = '';
      var gitalk = new Gitalk(config);
      gitalk.render('gitalk-container');
    }

    // 注册核心组件
    if (typeof window.initNoticeSystem === 'function') {
      window.PageManager.register('notice', window.initNoticeSystem);
    }
    
    window.PageManager.register('gitalk', function() {
      if (window.GITALK_SRC && document.getElementById('gitalk-container')) {
        if (typeof Gitalk === 'undefined') {
          var script = document.createElement('script');
          script.src = window.GITALK_SRC;
          script.onload = function() {
            setTimeout(initGitalk, 100);
          };
          document.body.appendChild(script);
        } else {
          setTimeout(initGitalk, 100);
        }
      }
    });

    // 监听页面更新事件
    document.addEventListener('page:updated', function() {
      setTimeout(function() {
        triggerEvents();
        window.PageManager.reinit();
      }, 50);
    });

    // 首次页面加载
    window.addEventListener('load', function() {
      setTimeout(function() {
        window.PageManager.reinit();
      }, 50);
    });

    // PJAX 链接处理

    function showLoading() {
      let progressBar = document.querySelector('.loading-progress');
      if (!progressBar) {
        progressBar = document.createElement('div');
        progressBar.className = 'mdui-progress loading-progress';
        progressBar.style.cssText = 'position:fixed;top:0;left:0;width:100%;z-index:9999;';
        const inner = document.createElement('div');
        inner.className = 'mdui-progress-indeterminate';
        progressBar.appendChild(inner);
        document.body.appendChild(progressBar);
      }
      progressBar.style.display = 'block';
    }

    function hideLoading() {
      const progressBar = document.querySelector('.loading-progress');
      if (progressBar) {
        progressBar.style.display = 'none';
      }
    }

    function handleAjaxError(errorType, href) {
      console.error(`页面加载失败: ${errorType}`);
      hideLoading();
      // 直接跳转，不要使用 reload
      window.location.href = href;
    }

    function handleAjaxSuccess(response, href, targetHash) {
      try {
        const $response = $(response);
        const $newContent = $response.find('#main');
        const $mainContent = $newContent.length ? $newContent : $response.filter('#main');
        
        if (!$mainContent.length) {
          throw new Error('无法找到目标内容');
        }

        // 清理旧组件
        window.PageManager.cleanup();

        // 替换内容
        $('#main').html($mainContent.html());
        
        // 重新执行页面脚本
        document.querySelectorAll('#main script[data-pjax]').forEach(item => {
          const newScript = document.createElement('script');
          Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value));
          const content = item.text || item.textContent || item.innerHTML || '';
          if (content) newScript.appendChild(document.createTextNode(content));
          item.parentNode.replaceChild(newScript, item);
        });
        
        // 提取 Gitalk 配置
        var newGitalkConfigScript = $mainContent.find('script').filter(function() {
          return this.textContent && this.textContent.includes('window.GITALK_CONFIG');
        });
        if (newGitalkConfigScript.length) {
          try { 
            eval(newGitalkConfigScript.text()); 
          } catch(e) {
            console.warn('GITALK_CONFIG eval error', e);
          }
        }
        
        // 更新浏览器状态
        if (!window._popstate_handling) {
          history.pushState({}, '', href);
        }
        document.title = $response.filter('title').text() || document.title;
        
        // 重新初始化页面组件
        triggerEvents();
        document.dispatchEvent(new Event('page:updated'));
        
        // 处理锚点跳转
        if (targetHash) {
          setTimeout(() => {
            const target = document.querySelector(targetHash);
            if (target) {
              target.scrollIntoView({ behavior: 'smooth' });
            }
          }, 100);
        } else {
          window.scrollTo(0, 0);
        }
        
        hideLoading();
      } catch (err) {
        console.error('页面切换失败:', err);
        handleAjaxError('content_error', href);
      }
    }

    function handleLinkClick(e, link, href, hashIndex, currentPath, targetPath) {
      if (hashIndex === 0 || currentPath === targetPath) {
        return true;
      }
      if (link.find('.mdui-icon.material-icons').text() === 'search' || !href || typeof href !== 'string' || href.startsWith('javascript:')) {
        return true;
      }
      if (link.prop('host') === window.location.host && !link.attr('target') && link.attr('target') !== '_blank' && !e.ctrlKey && !e.shiftKey && !e.metaKey) {
        e.preventDefault();
        showLoading();
        const targetUrl = hashIndex > -1 ? href.substring(0, hashIndex) : href;
    function handleLinkClick(e, link, href, hashIndex, currentPath, targetPath) {
      // 处理锚点链接
      if (hashIndex === 0 || currentPath === targetPath) {
        return true;
      }
      
      // 排除特殊链接
      if (link.find('.mdui-icon.material-icons').text() === 'search' || 
          !href || 
          typeof href !== 'string' || 
          href.startsWith('javascript:')) {
        return true;
      }
      
      // 只处理同域链接
      if (link.prop('host') === window.location.host && 
          !link.attr('target') && 
          link.attr('target') !== '_blank' && 
          !e.ctrlKey && !e.shiftKey && !e.metaKey) {
        
        e.preventDefault();
        showLoading();
        
        const targetUrl = hashIndex > -1 ? href.substring(0, hashIndex) : href;
        const targetHash = hashIndex > -1 ? href.substring(hashIndex) : '';
        
        $.ajax({
          url: targetUrl,
          method: 'GET',
          dataType: 'html',
          timeout: 10000,
          success: function(response) {
            handleAjaxSuccess(response, href, targetHash);
          },
          error: function(xhr, status, error) {
            handleAjaxError('network_error', href);
          }
        });
      }
    }

    $(document).on('click', 'a', function(e) {
      const link = $(this);
      const href = link.attr('href');
      
      // 检查 href 是否存在
      if (!href) return;
      
      const hashIndex = href.indexOf('#');
      const currentPath = window.location.pathname;
      
      try {
        const targetPath = new URL(href, window.location.origin).pathname;
        handleLinkClick(e, link, href, hashIndex, currentPath, targetPath);
      } catch (err) {
        // URL 解析失败，让浏览器正常处理
        console.warn('URL 解析失败:', href, err);
      }
    });

    window.onpopstate = function() {
      showLoading();
      window._popstate_handling = true;
      var href = location.href;
      
      $.ajax({
        url: href,
        method: 'GET',
        dataType: 'html',
        timeout: 10000,
        success: function(response) {
          handleAjaxSuccess(response, href, null);
          window._popstate_handling = false;
        },
        error: function(xhr, status, error) {
          window._popstate_handling = false;
          handleAjaxError('popstate_error', href);
        }
      });
    };
  </script>
  <script>if(window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches){document.getElementsByTagName("body")[0].className+=" mdui-theme-layout-dark"};</script>
  <script>var a=localStorage.getItem("mdui-drawer-close");if(!a){document.getElementsByTagName("body")[0].className+=" mdui-drawer-body-left"};</script>
  <%- partial('_partial/header', null, {cache: !config.relative_link}) %>
  <%- partial('_partial/sidebar', null, {cache: !config.relative_link}) %>
  <main id="main" class="mdui-m-t-5 fadeIn animated"><%- body %></main>
  <%- partial('_partial/footer', null, {cache: !config.relative_link}) %>
  <button id="gotop" class="mdui-fab mdui-fab-fixed mdui-fab-hide mdui-color-theme-accent mdui-ripple"><i class="mdui-icon material-icons" translate="no">arrow_upward</i></button>
  <% if (theme.busuanzi.site || theme.busuanzi.page) { %><script data-pjax defer src="<%- theme.busuanzi.busuanzi_js %>"></script><% } %>
  <%- js(['js/mdui', 'js/script']) %>
  <%- js('custom') %>
</body>
</html>